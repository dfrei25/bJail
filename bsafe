#!/usr/bin/env bash
#
# bsafe: rootless script to sandbox applications using bwrap, importing/using official firejail rule sets. Now also supports seccomp filtering.
#
# see --help/show_help() for usage and examples


# adjust this in case you want to use your locally installed firejail profile directory (optional) to import a wider set of whitelist rules
firejail_profile_dir="/etc/firejail"

[[ -n "$debug" ]] && set -x && PS4='+ $(date "+%s.%N"): '  # Add timestamp to each line
#### global variables/arrays

# array for files with read/write access and environment variables
declare -a rw_files ro_files env_vars
# array that will store all final arguments for bwrap
declare -a bwrap_args=()
# default runtime switches, see help
declare dryrun="" verbose="" use_seccomp="block"
# the set of permissions to be served to the application
declare application_profile=""
# the main firejail profile for the application
declare firejail_profile=""
# command running in bwrap sandbox...
declare executable=""
# ...and it's arguments
declare -a command_arguments=()


#### functions

show_help() {
  cat << EOF
Usage: $0 [option] command args

Options:
  -h, --help               # print this help
  -d, --dryrun             # print the bwrap command that would be executed and exit
  -v, --verbose            # more output
  -p=name, --profile=name  # manual select a profile
  -s, --seccomp-disable    # do not use seccomp to block system calls, based on profiles
  -l, --seccomp-log        # log prohibited syscalls from blacklist
                           # to dmesg (useful/needed when building/fixing profiles)
                           # -> tools/missing-syscall-helper.sh will help you.

Examples:
  $0 firefox google.com    # Open google.com in sandboxed firefox
  $0 steam -s              # Start sandboxed steam without syscall blacklist
  $0 strace ls             # Verify seccomp rules are working (not permitted error)
  $0 -l strace ls          # permissive-mode (success) -> audit message in dmesg
  $0 -p=firefox dolphin    # Open Dolphin with firefox profile to
                           # verify what files firefox would be able to see
  $0 -d discord            # Show discord launch command, but do not start discord
  $0 bash                  # Start sandboxed shell
EOF
}

# check if requirements are met or exit
validate_requirements() {
  # Is bwrap command available?
  if ! command -v bwrap &>/dev/null; then
    echo "Error: bubblewrap (bwrap) is not installed or not in PATH"
    exit 1
  fi
  # Change directory to where bJail is located
  if ! cd -- "$(dirname -- "$( realpath -- "${BASH_SOURCE[0]}" )")" &> /dev/null;then
    echo "Failed to change to script directory"
    exit 1
  fi
}

# argument handling, see help
parse_userinput() {
  # no arguments provided
  [[ $# -eq 0 ]] && echo "Error: No command specified" >&2 && show_help && exit 1
  
  # 1) parse bJail arguments
  for i in "$@"; do
    case $i in
      -h|--help)
        show_help && exit 0
        ;;
      -p*|--profile*)
        application_profile="${1#*=}"
        shift # next argument
        ;;
      -s|--seccomp-disable)
        use_seccomp=""
        shift
        ;;
      -l|--seccomp-log)
        use_seccomp="log"
        shift
        ;;
      -d|--dryrun)
        dryrun=1
        shift
        ;;
      -v|verbose)
        verbose=1
        shift
        ;;
      *)
        # when all options are processed, break
        break
        ;;
    esac
  done

  # 2) parse executable, check if it is valid
  if command -v "$1" >/dev/null 2>&1; then
    executable="$1"
    shift
  else
    echo "Error: Command \"""$1""\" is not installed or not in PATH"
    exit 1
  fi

  # assign the rest of the user input as commands arguments
  command_arguments=("${@}")
}

# Remove a list of items from a given array (removing blacklisted items)
#
# Example: arr1=(a b c d e); rm_arr=(b d); remove_items_from_array arr1 "${rm_arr[@]}"; echo ${arr1[@]} -> a c e
remove_items_from_array(){
  local -n arrayref="$1"
  shift

  for item in "$@";do
    for i in "${!arrayref[@]}";do
      [[ ${arrayref[i]} == "$item" ]] && unset 'arrayref[i]'
    done
  done
}

# Load firejail .profile files recursively
load_firejail_profile_path(){
  local profile_path="$1"

  # when no firejail profile got manually selected, default to application profile
  if [[ -z $firejail_profile ]];then
    firejail_profile="${application_profile}"
  fi

  ! [[ -r "$profile_path" ]] && return 1

  [[ -n $verbose ]] && echo "Loading firejail profile $profile_path"
  resolve_glob(){
    local file glob=$1 IFS=
    shift

    for file in $glob;do
      [[ -r $file ]] && "$@" "$file"
    done
  }
  rw_file_add(){
    rw_files+=("$1")
  }
  ro_file_add(){
    ro_files+=("$1")
  }
  
  while IFS=' ' read -r directive argument;do
    # skip parsing commented lines
    if [[ $directive != '#'* ]];then
      [[ $argument == disable* ]] && continue
      # Strip off any trailing comments.
      # XXX Does not trim trailing whitespace.
      argument=${argument%%#*}

      # XXX add videos and other firejail variables #### FIXME this code seems to be slow as hell
      #                                             #### consider testing awk gsub
      argument=${argument/\$\{HOME\}/$HOME}
      argument=${argument/\$\{RUNUSER\}/$XDG_RUNTIME_DIR}
      argument=${argument/\$\{DOWNLOADS\}/$HOME\/Downloads}

      # Remove all non-portable characters.
      # XXX This sort of thing should be minimised or removed if
      #     possible.
      #argument=${argument//[!a-zA-Z0-9\/.-\*\[\]\$\{\}\:+_\?]}
      #argument="$(tr -cd 'a-zA-Z0-9/.\-\*[]${}:+_?\ \n' <<<"$argument")" # fixme: replace tr with bash expensions
      # FIXME implement working path sanitation

      case $directive in
        include)
          resolve_glob "$firejail_profile_dir/$argument" load_firejail_profile_path ;;
        whitelist)
          resolve_glob "$argument" rw_file_add ;;
          # rw_files+=("$(resolve_glob "$argument")");;
        read-only)
          resolve_glob "$argument" ro_file_add ;;
          # ro_files+=("$(resolve_glob "$argument")");;
        whitelist-ro)
          resolve_glob "$argument" ro_file_add ;;
          # ro_files+=("$(resolve_glob "$argument")");;
        # seccomp) #todo
      esac
    fi
  done < "$profile_path"
}

# build the final bwrap arguments
build_bwrap_args_array() {
  local -A rwset roset
  local envvar

  for file in "${rw_files[@]}";do
    rwset["$file"]= # deduplication
  done
  for file in "${!rwset[@]}";do
    [[ -r "$file" ]] && bwrap_args+=(--bind "$file" "$file")
  done

  for file in "${ro_files[@]}";do
    roset["$file"]=
  done
  for file in "${!roset[@]}";do
    [[ -r "$file" ]] && bwrap_args+=(--ro-bind "$file" "$file")
  done
   
  for envvar in "${env_vars[@]}"; do
    [[ -n "${!envvar:-}" ]] && bwrap_args+=(--setenv "$envvar" "${!envvar}")
  done
}

# build the filter.bpf file, used by bwrap
gen_bpf_filter(){
  # first build the cBPF generator (helper tool to generate seccomp cBPF files)
  # when it does not exist yet, see gen-filter.cpp for source code
  if ! [[ -r ./gen-filter ]];then
    if echo '#include <seccomp.h>' | g++ -x c++ - -c -o /dev/null &>/dev/null; then
      make
    else
      echo seccomp.h from libseccomp is not available/installed, cannot create seccomp filters.
      unset use_seccomp
      return 1
    fi
  fi

  local modeflag
  case $use_seccomp in
    log)
      modeflag='-l'
      ;;
    block)
      modeflag='-b'
      ;;
  esac

  # call the helper program with our blacklist from syscall_blacklist.inc.sh 
  # application_profiles 
  if [[ -n $verbose ]];then
    ./gen-filter "$modeflag" "${seccomp_blacklist[@]}"
  else
  ./gen-filter "$modeflag" "${seccomp_blacklist[@]}" &>/dev/null
  fi
}


######## Execution start ########

# check if requirements are met and arguments are correct
validate_requirements

# apply options like "showcommand" and seperate them from executable and command_arguments
parse_userinput "${@}"

# load application_profiles, see data in application_profiles.inc.sh
source application_profiles.inc.sh

# load seccomp related functions and populate seccomp blacklist
[[ -n $use_seccomp ]] && source syscall_blacklist.inc.sh

# block everything first, we start from scratch
restrict_everything

# load "fundamental" permissions, like accessing /usr/bin
allow_basics

# load application profile (if existing)
load_application_profile

# load firejail profile (if existing)
load_firejail_profile_path "$firejail_profile_dir/$firejail_profile.profile"

# build final bwrap argument list
build_bwrap_args_array

# Print or run the command
if [[ $dryrun ]]; then
  printf 'The following command would be executed:\n\n'

  if [[ $use_seccomp ]]; then
    printf 'bwrap --seccomp 10 %s %s %s 10< filter.bpf\n\n' "${bwrap_args[*]}" "${executable}" "${command_arguments[*]}"
    printf 'Seccomp blacklist:\n\n%s\n' "${seccomp_blacklist[*]}"
  else
    printf 'bwrap %s %s %s\n' "${bwrap_args[*]}" "${executable}" "${command_arguments[*]}"
  fi
else
  # fd 9 is used to pass bwrap_args
  if [[ $use_seccomp ]]; then
    gen_bpf_filter # generate the seccomp filter cbpf file based on our blacklist
    (sleep 5 && rm /tmp/filter.bpf 2> /dev/null)&
    bwrap --args 9 --seccomp 10 "${executable}" "${command_arguments[@]}" 9< <(printf '%s\0' "${bwrap_args[@]}") 10< /tmp/filter.bpf
  else
    bwrap --args 9 "${executable}" "${command_arguments[@]}" 9< <(printf '%s\0' "${bwrap_args[@]}")
  fi
fi
